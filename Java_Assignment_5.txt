44.	Create three classes
-	Faculty with two data members facultyId and salary and two methods, one intput() method for accepting facultyId as input and another printSalary() to print salary.
-	FullTimeFaculty that inherits class Faculty with two data members’ basicSalary and allowance. Override input() method in this class that calls super class inut() method and accepts basicSalary and allowance as input. Salary should not be accepted as input but should be calculated using formula (basicSalary + allowance)
-	PartTimeFaculty that inherits class Faculty with two data members’ workingHours, ratePerHour. Override input() method in this class that calls super class inut() method and accepts workingHours and ratePerHour as input. Salary should not be accepted as input but should be calculated using formula ( workingHour * ratePerHour )



import java.util.Scanner;

class Faculty {
    private int facultyID;
    private double salary;

    Faculty() {
        salary = 0;
    }

    void input(int facultyID) {
        this.facultyID = facultyID;
    }

    protected double getSalary() {
        return salary;
    }

    protected void setSalary(double salary) {
        this.salary = salary;
    }

    void printSalary() {
        System.out.println("The salary of facultyID: " + facultyID + " is " + salary + " Rs.");
    }

}

class FullTimeFaculty extends Faculty {
    private double basicSalary;
    private double allowance;

    FullTimeFaculty() {
        super();
        basicSalary = 0;
        allowance = 0;

    }

    void input(int facultyID, double basicSalary, double allowance) {
        input(facultyID);
        this.basicSalary = basicSalary;
        this.allowance = allowance;
        setSalary(basicSalary + allowance);
    }

}

class PartTimeFaculty extends Faculty {
    private double workingHour;
    private double ratePerHour;

    PartTimeFaculty() {
        super();
        workingHour = 0;
        ratePerHour = 0;

    }

    void input(int facultyID, double workingHour, double ratePerHour) {
        input(facultyID);
        this.workingHour = workingHour;
        this.ratePerHour = ratePerHour;
        setSalary(workingHour * ratePerHour);
    }

}

public class Q44 {
    public static void main(String[] args) {

        FullTimeFaculty f = new FullTimeFaculty();
        PartTimeFaculty p = new PartTimeFaculty();

        f.input(100, 5000, 2000);
        p.input(200, 10, 100);

        f.printSalary();
        p.printSalary();

    }

}



=========================================================================


45.	Create a class Student with two members : rollno and percentage. Create default and parameterized constructors. Create method show() to display information. Create another class CollegeStudent inherits Student class. Add a new member semester to it. Create default and parameterized constructors. Also override show() method that calls super class show() method and displays semester. Create another class SchoolStudent inherits Student class. Add a new member className(eg 12th ,10th etc.) to it. Create default and parameterized constructors. Also override show() method that calls super class show() method and displays className. Create a class( say Demo) with main method that carries out the operation of the project : -- has array to store objects of any class(Student,  CollegeStudent or SchoolStudent) --create two CollegeStudent  and three SchoolStudent objects and store them inside the array -- display all records from the array -- search record on the basic of rollno and check given rollno is of SchoolStudent or of CollegeStudent. --count how many students are having A grade, if for A grade percentage >75.



class Student {
    private int rollNo;
    private double percentage;

    Student() {
        // rollNo = -1;
        percentage = 0;
    }

    Student(int rollNo, double percentage) {
        this.rollNo = rollNo;
        this.percentage = percentage;
    }

    void show() {
        System.out.print("Roll no. : " + rollNo + " Percentage: " + percentage + "%");
    }

    int getRollNo() {
        return rollNo;
    }

    double getPercentage() {
        return percentage;
    }

}

class CollegeStudent extends Student {
    private int semester;

    CollegeStudent() {
        semester = 0;
    }

    CollegeStudent(int rollNo, double percentage, int semester) {
        super(rollNo, percentage);
        this.semester = semester;
    }

    void show() {
        super.show();
        System.out.println(" Sem: " + semester);
    }

}

class SchoolStudent extends Student {
    private int className;

    SchoolStudent() {
        className = 0;
    }

    SchoolStudent(int rollNo, double percentage, int className) {
        super(rollNo, percentage);
        this.className = className;
    }

    void show() {
        super.show();
        System.out.println(" className: " + className);
    }

}

public class Q45 {

    public static void main(String[] args) {
        Student sArr[] = { new CollegeStudent(10, 60, 1), new CollegeStudent(12, 80, 2), new SchoolStudent(15, 95, 10),
                new SchoolStudent(16, 90, 8), new SchoolStudent(18, 70, 7) };

        for (Student s : sArr) {
            s.show();
        }

	System.out.println("");

        int searchRollNo = 15;

        for (Student s : sArr) {
            if (s.getRollNo() == searchRollNo) {

                if (s instanceof CollegeStudent)
                    System.out.println("This is a college student with following details:");
                else if (s instanceof SchoolStudent)
                    System.out.println("This is a School student with following details:");
                s.show();
            }
        }

	System.out.println("");

        int count = 0;
        for (Student s : sArr) {
            if (s.getPercentage() >= 75) {
                System.out.print("Grade = A  ");
                s.show();
                count++;
            }
        }

        System.out.println("No of students with A grade: " + count);

    }

}



============================================================================


 
46.	Create a program to demonstrate the use of instanceof operator or secure reference down casting.


import java.lang.*;

class Shape {

    int length;
    int height;

    void show() {
        System.out.println("Length: " + length + " height: " + height);
    }

    Shape() {
    }

    Shape(int length, int height) {
        this.length = length;
        this.height = height;
    }

    void Area() {
    };

}

class Rectangle extends Shape {

    void Area() {
        super.show();
        System.out.println("Area:  " + (length * height));
    }

    void diagonal() {
        double a = Math.pow(length, 2) + Math.pow(height, 2);
        System.out.println(" Diagonal is: " + (Math.sqrt(a)));
    }

    Rectangle() {
    }

    Rectangle(int length, int height) {
        super(length, height);
    }

}

class Triangle extends Shape {
    void Area() {
        super.show();
        System.out.println("Area:  " + (0.5 * length * height));
    }

    Triangle() {
    }

    Triangle(int length, int height) {
        super(length, height);
    }
}

public class Q46 {
    public static void main(String[] args) {

        Shape sArr[] = { new Rectangle(30, 40), new Triangle(10, 20) };

        sArr[0].Area();

        Rectangle r = (Rectangle) sArr[0];
        r.diagonal();
        sArr[1].Area();

    }

}



=============================================================================


47.	Create a program to demonstrate constructor chaining.


class Person
{
	Person()
	{
		System.out.println("No-arg Constructor Abc");
	}
	Person(int i)
	{
		System.out.println("Parameterized Constructor Abc");
	}
}
class Employee extends Person
{
	Employee()
	{
		
		System.out.println("No-arg Constructor Pqr");
	}
	Employee(int i)
	{
		System.out.println("Parameterized Constructor Pqr");
	}
}
class MainC
{
	public static void main(String args[])
	{
		Employee p = new Employee();
		Employee P1 = new Employee(11);
	}
}



============================================================================

